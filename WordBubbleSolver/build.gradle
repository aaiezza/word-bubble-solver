apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'git'
apply plugin: 'github'
apply plugin: 'release'
apply plugin: 'console'

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'me.trnl:github-release-gradle-plugin:0.1'
    }
}

dependencies {
	testCompile 'junit:junit:4.+'
}

group = 'shaba'
jar {
    baseName = 'WordBubblesSolver'
    manifest.attributes 'Main-Class': 'com.shaba.wordbubble.WordBubbleSolver'
    destinationDir project.rootDir
}


github {
    repo = 'git@github.com:aaiezza/word-bubble-solver.git'
    credentials {
        username = { console.prompt ( 'Please enter Github username:' ) }
        password = { console.prompt ( 'Please enter Github password:' ) }
    }
}


// Redefine the sourcesets
sourceSets {
    main {
        java.srcDir 'src'
        resources {
            srcDir 'resources'
            exclude 'test.wb'
            exclude 'bin'
            // include '*Usage.txt'
        }
        output.classesDir 'bin'
    }
    test {
        java.srcDir 'test'
        resources.srcDirs 'test_resources', main.resources
    }
}

processResources { rename { "resources/${it}" } }

release {
    /* Let's check that everything is committed */
    doFirst {
        if (!project.git.status().isEmpty()) {
            throw new GradleException('You have uncommitted changes.')
        }
    }
    
    def bumpVersion = { version ->
		def vers = version.split("\\.")
		def newVers = (vers[vers.length-1] as Integer) + 1
		
		version.substring(0, version.lastIndexOf(".") + 1) + newVers
	}
    
    /* Ask user for a release version, suggesting some default variant. */
    version = { console.prompt(' > Please enter release version:', project.version - '-SNAPSHOT') }
    tag = { "v$project.release.version" }
    commitMessage = { "Release $project.release.version" }

    /* Files and projects that needs to be updated with a new release version. */
    update {
        file project.file('build.gradle')
        projects allprojects
    }

    /* Spec for next version. As above, asking user input. */
    next {
        version = { console.prompt(' > Please enter next version:', bumpVersion( project.release.version ) ) }
        commitMessage = { "Bumping version to $project.release.next.version" }
    }

    /* Files and projects that needs to be updated with a new release version. */
    update {
        file project.file('build.gradle')
        projects allprojects
    }

    /* Tasks that needs to be performed during release. Will be done after tag step. */
    dependsOn jar
}

// Add deleting the jar file to the clean task
clean { delete jar.archivePath }
